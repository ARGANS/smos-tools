#!/usr/bin/env python
"""
The command line interface for reading and plotting soil moisture products

"""

import argparse
import os
import sys
import logging.config
from smos_tools import read_sm_product
from smos_tools.logger.logging_config import logging_config

logging.config.dictConfig(logging_config)

logging.getLogger(__name__)

parser = argparse.ArgumentParser(description="Read and plot L2SM Processor UDP files")

subparsers = parser.add_subparsers(help="Choose whether to plot single orbit or difference between two orbits.", dest='mode')

diff_parser = subparsers.add_parser('plot-diff', aliases=['diff'], help='Evaluate and plot the difference between two UDP DBL files for a requested field name. Difference UDP 1 -> UDP 2, ie. the difference is FILE2-FILE1.')
orbit_parser = subparsers.add_parser('plot-orbit', aliases=['plot'], help='Plot soil moisture orbit from UDP file for a requested field name.')

# Plot diff
diff_parser.add_argument('--orbit-file', '-o', nargs=2, metavar='FILE',
                    help='Path to UDP .DBL file for a L2SM orbit.')
diff_parser.add_argument('--orbit-name', '-n', nargs=2, default=['Orbit 1', 'Orbit 2'], metavar='NAME',
                    help='Name to associate to orbit in the plot title / legend etc.')

diff_parser.add_argument('--field-name', '-f', default='Soil_Moisture',
                    help="Field name to extract and plot. Default 'Soil_Moisture'.")
diff_parser.add_argument('--vmin', '-m', default=-1, help="Minimum value before saturation.")
diff_parser.add_argument('--vmax', '-M', default=1, help="Maximum value before saturation.")
diff_parser.add_argument('--x-axis', '-x', default='Latitude', help="Abscissas over which to plot the fieldname. One of: {'Latitude', 'Grid_Point_ID'}.")
diff_parser.add_argument('--save-directory', '-s', default=None, help="Optional directory to save plots and figures to")

# Plot orbit
orbit_parser.add_argument('--orbit-file', '-o', nargs=1, metavar='FILE',
                    help='Path to UDP .DBL file for a L2SM orbit.')
orbit_parser.add_argument('--orbit-name', '-n', nargs=1, default='Test Orbit', metavar='NAME',
                    help='Name to associate to orbit in the plot title / legend etc.')

orbit_parser.add_argument('--field-name', '-f', default='Soil_Moisture',
                    help="Field name to extract and plot. Default 'Soil_Moisture'.")
orbit_parser.add_argument('--vmin', '-m', default=-1, help="Minimum value before saturation.")
orbit_parser.add_argument('--vmax', '-M', default=1, help="Maximum value before saturation.")
orbit_parser.add_argument('--x-axis', '-x', default='Latitude', help="Abscissas over which to plot the fieldname. One of: {'Latitude', 'Grid_Point_ID'}.")
orbit_parser.add_argument('--save-directory', '-s', default=None, help="Optional directory to save plots and figures to")

args = parser.parse_args()

if args.mode == 'plot-diff' or args.mode == 'diff':

    # Requested to plot the difference between two UDP files
    file1 = os.path.abspath(args.orbit_file[0])
    file2 = os.path.abspath(args.orbit_file[1])
    field = args.field_name
    name1 = args.orbit_name[0]
    name2 = args.orbit_name[1]
    if (args.save_directory != None):
        savedir = os.path.abspath(args.save_directory)
    else:
        savedir = None

    print('Plot difference UDP 1 -> UDP 2 (ie. OLD -> NEW)')
    print('    {} -> {}'.format(name1, name2))
    print('UDP file 1: {}'.format(name1))
    print('    {}'.format(file1))

    fail = False
    if not os.path.isfile(file1):
        print('ERROR: UDP file not found.')
        fail = True
    print('UDP file 2: {}'.format(name2))
    print('    {}'.format(file2))
    if not os.path.isfile(file2):
        print('ERROR: UDP file not found.')
        fail = True
    if fail:
        sys.exit(1)

    if savedir != None:
        if not os.path.isdir(savedir):
            print('WARN: Save directory does not exist.\n    {}'.format(savedir))
            savedir = None
        else:
            print('Save figures to directory:\n    {}'.format(savedir))

    # check these files are for the same orbit, else error
    head, tail1 = os.path.split(file1)
    head, tail2 = os.path.split(file2)

    if tail1[19:34] != tail2[19:34]:
        print('ERROR: UDP1 and UDP2 are not for the same orbit!')
        sys.exit(1)
    print('Extracting field: {}.'.format(field))

    dataframe1 = read_sm_product.extract_field(read_sm_product.read_sm_product(file1), field)
    dataframe2 = read_sm_product.extract_field(read_sm_product.read_sm_product(file2), field)
    read_sm_product.evaluate_field_diff(dataframe1, dataframe2, field, name1, name2, vmin=args.vmin, vmax=args.vmax, xaxis=args.x_axis, save_fig_directory=savedir)

elif args.mode == 'plot-orbit' or args.mode == 'plot':
    # Requested to plot the SM values for the specific orbit
    filename = os.path.abspath(args.orbit_file[0])
    field = args.field_name
    name = args.orbit_name[0]
    if (args.save_directory != None):
        savedir = os.path.abspath(args.save_directory)
    else:
        savedir = None
    print('UDP file: {}'.format(name))
    print('    {}'.format(filename))

    fail = False
    if not os.path.isfile(filename):
        print('ERROR: UDP file not found.')
        fail = True
    if fail:
        sys.exit(1)

    if savedir != None:
        if not os.path.isdir(savedir):
            print('WARN: Save directory does not exist.\n    {}'.format(savedir))
            savedir = None
        else:
            print('Save figures to directory:\n    {}'.format(savedir))

    print('Extracting field: {}.'.format(field))
    dataframe = read_sm_product.extract_field(read_sm_product.read_sm_product(filename), field)

    read_sm_product.plot_sm_orbit(dataframe, name, fieldname=field, vmin=args.vmin, vmax=args.vmax, save_fig_directory=savedir)
else:
    # For now this is the only possible command
    print('ERROR: Invalid or no flags given.')
    print('       Try -h for help.')


